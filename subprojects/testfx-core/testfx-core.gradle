/*
 * Copyright 2013-2014 SmartBear Software
 * Copyright 2014-2023 The TestFX Contributors
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
 * European Commission - subsequent versions of the EUPL (the "Licence"); You may
 * not use this work except in compliance with the Licence.
 *
 * You may obtain a copy of the Licence at:
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
 * specific language governing permissions and limitations under the Licence.
 */
apply plugin: 'java-library'

ext.pomDescription = 'TestFX Core'
ext.moduleName = 'org.testfx'

static def getOSName() {
	final String osName = System.getProperty("os.name").toLowerCase()
	if (osName.contains("linux")) {
		return ("linux")
	} else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
		return ("mac")
	} else if (osName.contains("windows")) {
		return ("win")
	}
	return ""
}

repositories {
	mavenCentral()
}

dependencies {
	if (JavaVersion.current().isJava10Compatible()) {
		def jfxVersion = System.getenv("OPENJFX_VERSION") ?: "$defaultJfxVersion"
		def platform = getOSName()

		implementation "org.openjfx:javafx-base:${jfxVersion}:${platform}"
		implementation "org.openjfx:javafx-controls:${jfxVersion}:${platform}"
		implementation "org.openjfx:javafx-graphics:${jfxVersion}:${platform}"
		implementation "org.openjfx:javafx-swing:${jfxVersion}:${platform}"
		implementation "org.openjfx:javafx-fxml:${jfxVersion}:${platform}"
	}

	implementation 'org.hamcrest:hamcrest:2.2'
	implementation 'org.assertj:assertj-core:3.24.2'
	implementation 'org.osgi:osgi.core:8.0.0'

	testImplementation 'junit:junit:4.13.2'
	testImplementation 'org.hamcrest:hamcrest-core:2.2'
	testImplementation 'org.mockito:mockito-core:3.0.0'

	if (JavaVersion.current().isJava12Compatible()) {
		testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
	} else if (JavaVersion.current().isJava11Compatible()) {
		testImplementation 'org.testfx:openjfx-monocle:jdk-11+26'
	} else if (JavaVersion.current().isJava10Compatible() &&
			System.getProperty('java.vm.name').toLowerCase().contains('openjdk')) {
		testImplementation 'org.testfx:openjfx-monocle:jdk-11+26'
	} else if (JavaVersion.current().isJava9Compatible()) {
		testImplementation 'org.testfx:openjfx-monocle:jdk-9+181'
	} else {
		testImplementation 'org.testfx:openjfx-monocle:8u76-b04'
	}
}

//configurations {
//	apiElements {
//		sourceCompatibility = JavaVersion.VERSION_11
//		targetCompatibility = JavaVersion.VERSION_11
//	}
//}

//if (JavaVersion.current().isJava9Compatible()) {
//	tasks.register('compileModuleInfoJava', JavaCompile) {
//		dependsOn 'compileJava'
////            doFirst {
////                options.setCompilerArgs(List.of('--module-path', compileJava.classpath.asPath,
////                    '-J--add-opens","javafx.graphics/com.sun.javafx.application=org.testfx'))
//////                options.compilerArgs = [
//////                    '--module-path', compileJava.classpath.asPath,
//////                    '--add-exports', 'javafx.graphics/com.sun.javafx.application=org.testfx'
//////                ]
////            }
//		options.encoding = 'UTF-8'
//		classpath = files()
//		source = sourceSets.main.allJava
//		sourceCompatibility = JavaVersion.VERSION_11
//		targetCompatibility = JavaVersion.VERSION_11
//		destinationDir = compileJava.destinationDir
//		include '*module-info*'
//	}
//	classes.dependsOn compileModuleInfoJava
////        def dependents = configurations.api.dependencies + configurations.implementation.dependencies
////        def dependentProjects = dependents.findAll { it instanceof ProjectDependency }
////
////        // Connect to dependencies module info task
////        dependentProjects.each { dependency ->
////            compileModuleInfoJava.dependsOn ":${dependency.name}:compileModuleInfoJava"
////        }
//}

compileJava {
	options.encoding = 'UTF-8'
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	if (!JavaVersion.current().isJava9Compatible()) {
		exclude '*module-info*'
	}
}

javadoc {
	source = sourceSets.main.allJava
	options.addBooleanOption('html5', true)
	dependsOn compileJava
	if (JavaVersion.current().isJava9Compatible()) {
		inputs.property("moduleName", moduleName)

		doFirst {
			options.setModulePath(classpath.asList())
			options.addStringOption('-add-reads', "$moduleName=org.assertj.core")
			options.addMultilineStringsOption('-add-modules').setValue([
					'javafx.graphics', 'javafx.controls', 'javafx.swing', 'org.hamcrest', 'org.assertj.core'])
			options.addMultilineStringsOption('-add-exports').setValue([
					'javafx.graphics/com.sun.glass.ui=org.testfx'])
		}
	} else {
		exclude '*module-info*'
	}
}

compileTestJava {
	if (!JavaVersion.current().isJava9Compatible()) {
		exclude '*module-info*'
	}
}

test {
	if (JavaVersion.current().isJava9Compatible()) {
		inputs.property("moduleName", moduleName)
		doFirst {
			jvmArgs = [
					'--module-path', classpath.asPath,
					'--add-modules', 'ALL-MODULE-PATH',
					'--add-exports', 'org.testfx/org.testfx.service.locator.impl=junit',
					'--add-exports', 'org.testfx/org.testfx.service.query.impl=junit',
					'--add-exports', 'org.testfx/org.testfx.service.finder.impl=junit',
					'--add-exports', 'org.testfx/org.testfx.service.adapter.impl=junit',
					'--add-exports', 'org.testfx/org.testfx.service.support.impl=junit',
					'--add-exports', 'org.testfx/org.testfx.robot.impl=junit',
					'--add-exports', 'org.testfx/org.testfx.toolkit.impl=junit',
					'--add-exports', 'org.testfx/org.testfx.cases=junit',
					'--add-exports', 'org.testfx/org.testfx.cases.acceptance=junit',
					'--add-exports', 'org.testfx/org.testfx.cases.integration=junit',
					'--add-exports', 'org.testfx/org.testfx.cases.issue=junit',
					'--add-reads', "$moduleName=junit",
					'--add-reads', "$moduleName=javafx.fxml",
					'--add-opens', "$moduleName/org.testfx.service.query.impl=org.testfx",
					'--add-opens', "javafx.graphics/com.sun.glass.ui=$moduleName",
					'--add-exports', "javafx.graphics/com.sun.glass.ui=$moduleName",
					'--add-exports', "javafx.graphics/com.sun.javafx.application=$moduleName",
					'--add-exports', 'javafx.graphics/com.sun.glass.ui=org.testfx.monocle',
					'--add-exports', 'javafx.graphics/com.sun.javafx.application=org.testfx.monocle',
					'--add-exports', 'javafx.graphics/com.sun.glass.ui.delegate=org.testfx.monocle',
					'--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir, sourceSets.test.resources.srcDirs).asPath,
			]
			classpath = files()
		}
	}
}

jar {
	inputs.property("moduleName", moduleName)

	// FIXME: This makes a type of fat/uber JAR that contains all of our dependencies!
	/*
	bnd (
			'Export-Package': '*',
			'Bundle-Version': "${System.env.JITPACK == 'true' ? '0.0.1' : project.version}",
			'Bundle-Activator': 'org.testfx.osgi.Activator',
			'Require-Capability': 'org.testfx.osgi.versionadapter'
	)
	 */
}
