/*
 * Copyright 2013-2014 SmartBear Software
 * Copyright 2014-2015 The TestFX Contributors
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
 * European Commission - subsequent versions of the EUPL (the "Licence"); You may
 * not use this work except in compliance with the Licence.
 *
 * You may obtain a copy of the Licence at:
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
 * specific language governing permissions and limitations under the Licence.
 */

apply plugin: "maven-publish"

def pomConfig = {
    name project.name
    url "https://github.com/TestFX/TestFX"
    inceptionYear "2013"

    licenses {
        license([:]) {
            name "European Union Public Licence, Version 1.1"
            url "http://ec.europa.eu/idabc/eupl.html"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/TestFX/TestFX"
    }

    developers {
        developer {
            id "minisu"
            name "Henrik Olsson"
            url "https://github.com/minisu"
            timezone "+1"
            roles {
                role "former developer"
            }
        }

        developer {
            id "dainnilsson"
            name "Dain Nilsson"
            url "https://github.com/dainnilsson"
            timezone "+1"
            roles {
                role "project founder"
                role "former developer"
            }
        }

        developer {
            id "hastebrot"
            name "Benjamin Gudehus"
            url "https://github.com/hastebrot"
            timezone "+1"
            roles {
                role "project maintainer"
            }
        }
    }
}

publishing {
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? sonatypeSnapshotsUrl : sonatypeReleasesUrl
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
            }
            from components.java
            afterEvaluate {
                artifact sourceJar
                artifact javadocJar
                pom.withXml {
                    Node pomNode = asNode()
                    pomNode.dependencies.'*'.findAll() {
                        it.groupId.text() == 'org.openjfx'
                    }.each {
                        it.remove(it.classifier)
                    }
                    asNode().children().last() + pomConfig
                    asNode().appendNode("description", project.pomDescription)
                }
            }
        }
    }
}
